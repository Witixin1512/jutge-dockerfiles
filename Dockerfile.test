FROM ubuntu
WORKDIR /root
ENV DEBIAN_FRONTEND=noninteractive

ARG DOCKER_GID

# Update ubuntu packages
RUN apt-get --yes update && apt-get --yes upgrade

# Set local timezone
RUN apt-get --yes install tzdata && \
    ln -fs /usr/share/zoneinfo/Europe/Madrid /etc/localtime && \
    dpkg-reconfigure --frontend noninteractive tzdata

# Install initial tools
RUN apt-get --yes install \
    tzdata imagemagick joe nano tree ack wget curl moreutils less adduser sudo git

# Create user 'worker'
RUN adduser --disabled-password --gecos '' worker
COPY _inputrc /home/worker/.inputrc
RUN chown -R worker:worker /home/worker

# Install docker (taken from https://github.com/nestybox/dockerfiles/blob/master/ubuntu-bionic-systemd-docker/Dockerfile)
RUN apt-get update && apt-get install -y curl && \
    rm -rf /var/lib/apt/lists/* && \
    curl -fsSL https://get.docker.com -o get-docker.sh&& \
    sh get-docker.sh

# Add user "admin" to the Docker group    
# + change the 'docker' group to match the GID of the host's docker group
RUN usermod -a -G docker worker && \
    groupmod -g $DOCKER_GID docker

# Using docker inside the container requires binding the docker socket:
#   docker run -v /var/run/docker.sock:/var/run/docker.sock ...
# (from: https://stackoverflow.com/a/46918825)

# Install C compilers
RUN apt-get --yes install build-essential clang

# Install Python3
RUN apt-get --yes install python3 python3-pip python3-pillow python3-cairo python3-yaml python3-venv

# Install extra languages
RUN apt-get --yes install algol68g basic256 beef bwbasic chicken-bin libchicken-dev \
    clisp erlang f2c fpc gambc gccgo gdc gfortran ghc gnat gobjc golang gprolog guile-2.2 \
    lua5.3 nodejs ocaml openjdk-11-jdk-headless r-base r-base-core r-base-dev r-cran-vgam \
    r-recommended rhino ruby stalin tcl php-cli rustc crystal

# Codon
ADD https://exaloop.io/install.sh /root/install-codon.sh
RUN /bin/bash /root/install-codon.sh && \
    mv /root/.codon /opt/codon && \
    ln -s /opt/codon/bin/codon /usr/local/bin/codon

# Clojure
ADD https://github.com/clojure/brew-install/releases/latest/download/linux-install.sh /root/install-clojure.sh
RUN /bin/bash /root/install-clojure.sh

# Crystal
ADD https://dist.crystal-lang.org/apt/setup.sh /root/install-crystal.sh
RUN /bin/bash /root/install-crystal.sh 

# Whitespace
COPY wspace /usr/local/bin/wspace
RUN chmod 755 /usr/local/bin/wspace

# apt clean
RUN apt-get --yes clean

# Install jutge-toolkit and jutge-server-toolkit from source
RUN pip3 install --break-system-packages turtle-pil easyinput yogi pytokr mypy pycodestyle \
    'jutge-toolkit @ git+https://github.com/jutge-org/jutge-toolkit' \
    'jutge-server-toolkit @ git+https://github.com/jutge-org/jutge-server-toolkit' && \
    pip3 cache purge

# Fix convert, because it does not generate the eps files
# see https://askubuntu.com/questions/1081695/error-during-converting-jpg-to-pdf
RUN perl -p -i.bak -e 's/domain="coder" rights="none"/domain="coder" rights="read|write"/g' /etc/ImageMagick-6/policy.xml

# Compile 'jutge-vinga' (taking source from the build context) using container compilers and install it
# To be able to do this, the source code has to be cloned outside the container, since it is a private repository
RUN --mount=type=bind,source=jutge-vinga-source,target=/root/jutge-vinga,readwrite \
    make -C /root/jutge-vinga/src && \
    cp /root/jutge-vinga/src/jutge-vinga /usr/local/bin/jutge-vinga && \
    chmod u=rws,g=rs,o=rx /usr/local/bin/jutge-vinga
RUN echo "worker ALL=(ALL) NOPASSWD: /usr/local/bin/jutge-vinga" | (sudo su -c 'EDITOR="tee -a" visudo -f /etc/sudoers.d/worker')

USER worker
WORKDIR /home/worker
ENV USER=worker
ENV LANG=C.UTF-8
